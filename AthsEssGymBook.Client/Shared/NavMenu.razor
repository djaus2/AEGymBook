@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@inject AthsEssGymBook.Client.Services.AthleteClient athleteClient

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">AE Gym Bookings</a>
    <button class="navbar-toggler" @onclick="@ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="@ToggleNavMenu">
    <ul class="nav flex-column">

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="COVID-19">
                <span class="oi oi-ban" aria-hidden="true"></span> COVID-19 Restrictions
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="AllBookings">
                <span class="oi oi-calendar" aria-hidden="true"></span> All Bookings
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="ListSlots">
                <span class="oi oi-calendar" aria-hidden="true"></span> Time Sots
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="MyBookings">
                <span class="oi oi-bolt" aria-hidden="true"></span> My Bookings
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Book">
                <span class="oi oi-book" aria-hidden="true"></span> Make a Booking
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="COVID-19">
                <span class="oi oi-elevator" aria-hidden="true"></span> In In/Out of Gym
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Logout">
                <span class="oi oi-elevator" aria-hidden="true"></span> Logout
            </NavLink>
        </li>
        @if (IsCoach)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="BookAsCoach">
                    <span class="oi oi-briefcase" aria-hidden="true"></span> Book as Coach
                </NavLink>
            </li>
        }
        @if (HasAccessCard)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="HasAccessCard">
                    <span class="oi oi-briefcase" aria-hidden="true"></span> Book Out of Hours
                </NavLink>
            </li>
        }
        @if (CanSetSlots)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="CanSetSlots">
                    <span class="oi oi-envelope-open" aria-hidden="true"></span> Set Booking Sots
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="DeleteSlots">
                    <span class="oi oi-delete" aria-hidden="true"></span> Delete Time Slots
                </NavLink>
            </li>
        }
        @if (IsAdmin)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="Admin">
                    <span class="oi oi-briefcase" aria-hidden="true"></span> Admin
                </NavLink>
            </li>
        }
    </ul>
</div>

@functions {
    bool IsAdmin = false;
    bool HasAccessCard = false;
    bool IsCoach = false;
    bool CanSetSlots = false;


    AuthenticationState context { get; set; }
    string UserName;

    protected override async Task OnInitializedAsync()
    {
        context = await authStateProvider.GetAuthenticationStateAsync();
        UserName = context.User.Identity.Name;

        Athlete user = await athleteClient.GetAthlete(UserName);
        if (user.IsAdmin)
        {
            IsAdmin = true;
            HasAccessCard = true;
            CanSetSlots =true;
            IsCoach = true;
        }
        else
        {
            IsAdmin = user.IsAdmin;
            HasAccessCard = user.HasAccessCard;
            IsCoach = user.IsCoach;
            CanSetSlots = user.CanSetSlots;
        }

    }
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }
    }

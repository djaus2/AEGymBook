@page "/MyBookings"
@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject Services.BookingsClient BookingsClient

<AuthorizeView>
    <Authorized>
        <h2>Athletics Essendon Gym Bookings</h2>
        <h3><font color="blue">My Gym Bookings</font></h3>
        <h4>Hello @context.User.Identity.Name</h4>

        <p>Click here to choose the <b><i>Booking Date</i></b> to show.</p>
        <table class="table2">
            <tbody>
                <tr>
                    <td colspan="4">
                        <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" />
                        <DatePicker Style="opacity:100" SelectedDate="BookingDate_Local" Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today_Local" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td><button class="btn btn-primary" @onclick="@ShowFrom">From</button></td>
                    <td align="right"><i><b>Refresh:&nbsp;</b></i></td>
                    <td><button class="btn btn-primary" @onclick="@ShowAll">Show All</button></td>
                </tr>
                <tr>
                    <td><b>Date:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PrevDay">Prev</button></td>
                    <td><button class="btn btn-primary" @onclick="@ShowToday">Today</button></td>
                    <td><button class="btn btn-primary" @onclick="@NextDay">Next</button></td>
                </tr>
                <tr>
                    <td><b>Week:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PrevWeek">Prev</button></td>
                    <td><button class="btn btn-primary" @onclick="@ThisWeek">Current</button></td>
                    <td><button class="btn btn-primary" @onclick="@NextWeek">Next</button></td>
                </tr>
            </tbody>
        </table>



        @if (MyBookingz == null)
        {
            <p><em>Please wait. Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Athlete Id</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Duration</th>
                        <th>Slots</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in Bookings)
                    {
                        <tr>
                            <td>@booking.Id</td>
                            <td>@booking.AthleteId</td>
                            <td>@booking._Date</td>
                            <td>@booking.Time</td>
                            <td>@booking.Duration</td>
                            <td>@booking.Slots.Count</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>
    <Authorizing>
        <h1>Please wait. Loading ...</h1>
    </Authorizing>
</AuthorizeView>


@functions {

    AuthenticationState context { get; set; } 
    List<BookingInfo> MyBookingz { get; set; } = new List<BookingInfo>();
    List<BookingInfo> Bookings { get; set; } = new List<BookingInfo>();
    Athlete LoggegInAthlete { get; set; }
    List<Athlete> Athletes { get; set; }

    Dictionary<TimeSpan, int> BookingCounts { get; set; }
    List<TimeSpan> MyBookingTimes { get; set; } = new List<TimeSpan>();

    LocalDate Today = new LocalDate(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    int currentCount = Settings.MaxNumberInRoom;
    int showCount = 0;
    string Message = "Info";

    DateTime Today_DT;
    LocalDate Today_Local;

    bool DatePickerVisible = false;
    bool TimePickerVisible = false;


    LocalDate BookingDate_Local;  // = System.DateTime.Today;
    string ThisDate = System.DateTime.Today.ToString("D");

    DateTime BookingDate_DT = DateTime.Today;

    void UpdateDate()
    {
        ThisDate = BookingDate_DT.ToString("D");
        StateHasChanged();
    }

    void UpdateData()
    {

        //var allSlots = await _BookingSlotsClient.GetSlotList();
        UpdateDate();
    }

    async Task ShowAll()
    {
        BookingDate_DT = DateTime.Today;
        ThisDate = BookingDate_DT.ToString("D");
        MyBookingz = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
        Bookings = MyBookingz;
        DatePickerVisible = false;
    }

    void ShowFrom()
    {
        DatePickerVisible = false;
        TimePickerVisible = false;

        var slots = from b in MyBookingz where DateTime.Compare(b.Date, BookingDate_DT) >= 0 select b;

        Bookings = slots.ToList<BookingInfo>();
        UpdateDate();
    }

    void NextDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            var slots = from sl in MyBookingz where sl.Date == BookingDate_DT select sl;
            Bookings = slots.ToList<BookingInfo>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ShowToday()
    {
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        DatePickerVisible = false;
        TimePickerVisible = false;
        var slots = from sl in MyBookingz where sl.Date == BookingDate_DT select sl;
        Bookings = slots.ToList<BookingInfo>();
        UpdateDate();
    }

    void PrevDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            var slots = from sl in MyBookingz where sl.Date == BookingDate_DT select sl;
            Bookings = slots.ToList<BookingInfo>();
            UpdateDate();
        }
        else
        {

        }
    }

    void NextWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(+7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

            DatePickerVisible = false;
            TimePickerVisible = false;

            int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
            DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
            DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
            var slots = from b in MyBookingz where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

            Bookings = slots.ToList<BookingInfo>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ThisWeek()
    {
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

        DatePickerVisible = false;
        TimePickerVisible = false;

        int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
        DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
        DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
        var slots = from b in MyBookingz where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

        Bookings = slots.ToList<BookingInfo>();
        UpdateDate();
    }

    void PrevWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

            DatePickerVisible = false;
            TimePickerVisible = false;

            int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
            DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
            DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
            var slots = from b in MyBookingz where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

            Bookings = slots.ToList<BookingInfo>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }



    async Task RefreshData()
    {
        MyBookingz = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
        Bookings = MyBookingz;
        BookingCounts = await BookingsClient.GetBookingCountForDay(DateTime.Today);
        MyBookingTimes = await BookingsClient.GetMyBookingsForDay(DateTime.Today, LoggegInAthlete.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        Today_DT = DateTime.Today;
        Today_Local = new LocalDate(Today_DT.Year, Today_DT.Month, Today_DT.Day);
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

        string ThisDate = System.DateTime.Today.ToString("D");


        context = await authStateProvider.GetAuthenticationStateAsync();
        string name = context.User.Identity.Name;
        var vathletes = await Http.GetFromJsonAsync<Athlete[]>("api/Athletes");
        Athletes = vathletes.ToList<Athlete>();
        LoggegInAthlete = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{name}");
        await RefreshData();
        StateHasChanged();
    }


    void DatePickerFocused(FocusEventArgs e)
    {
        DatePickerVisible = true;
        TimePickerVisible = false;
    }

    async Task LocaDateSelected(LocalDate localDate)
    {
        BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
        BookingDate_Local = localDate;
        ThisDate = BookingDate_DT.ToString("D");
        MyBookingz = await BookingsClient.GetBookings(BookingDate_DT, LoggegInAthlete.Id);
        DatePickerVisible = false;
        StateHasChanged();
    }



    async Task Selected()
    {
        ThisDate = BookingDate_DT.ToString("D");
        MyBookingz = await BookingsClient.GetBookings(BookingDate_DT, LoggegInAthlete.Id);
        DatePickerVisible = false;
    }





}





@page "/DeleteSlots"
@using NodaTime;
@using Telerik.Blazor.Components
@inject Services.BookingSlotsClient _BookingSlotsClient
@inject Services.BookingsClient _BookingsClient
@inject IJSRuntime JsRuntime

<h3><font color="blue">Delete Slots</font></h3>
<AuthorizeView>
    <Authorized>
        <table class="table2">
            <tbody>
                <tr>
                    <td colspan="4">
                        <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" />
                        <DatePicker Style="opacity:100" SelectedDate="BookingDate_Local" Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today_Local" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />
                    </td>
                </tr>
                <tr>
                    <td align="right"><font color="blue"><b><i>From:&nbsp;</i></b></font></td>
                    <td><TelerikButton IconClass="oi oi-collapse-right" @onclick="@ShowFrom"></TelerikButton></td>
                    <td align="right"><font color="blue"><b><i>Reload:&nbsp;</i></b></font></td>
                    <td><TelerikButton IconClass="oi oi-reload" @onclick="@ShowSlots"></TelerikButton></td>
                </tr>
                <tr>
                    <td align="right"><font color="red"><b>Day:&nbsp;</b></font></td>
                    <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevDay"></TelerikButton></td>
                    <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ShowToday"></TelerikButton></td>
                    <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextDay"></TelerikButton></td>
                </tr>
                <tr>
                    <td align="right"><font color="red"><b>Week:&nbsp;</b></font></td>
                    <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevWeek"></TelerikButton></td>
                    <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ShowToday"></TelerikButton></td>
                    <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextWeek"></TelerikButton></td>
                </tr>


                <tr><td colspan="4">Current count: @currentCount</td></tr>


                @*<tr>
                    <td><b>ToDo:</b></td>
                    <td><button class="btn btn-primary" @onclick="@CommitAll">CommitAll</button></td>
                    <td><button class="btn btn-primary" @onclick="@Refresh">UndoAll</button></td>
                    <td>&nbsp;</td>
                </tr>*@
            </tbody>
        </table>


        <TelerikGrid Data="@Slots"
                     OnDelete="@DeleteHandler"
                     Resizable="true" Reorderable="true">
            <GridColumns>
                <GridColumn Field=@nameof(BookingSlot.Id) Title="Id" Editable="false" />
                <GridColumn Field=@nameof(BookingSlot._Date) Title="Date" Editable="false" />
                <GridColumn Field=@nameof(BookingSlot.Time) Title="Time" Editable="false" />
                <GridCommandColumn>
                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>
    </Authorized>
    <Authorizing>
        <h1>Please wait. Loading ...</h1>
    </Authorizing>
</AuthorizeView>

@functions {

    int currentCount { get; set; } = 0;

    //List<BookingSlot> AllSlots = new List<BookingSlot>();
    //List<BookingSlot> Slots = new List<BookingSlot>();

    protected override async Task OnInitializedAsync()
    {
        Today_DT = DateTime.Today;
        Today_Local = new LocalDate(Today_DT.Year, Today_DT.Month, Today_DT.Day);
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

        await ShowSlots();
        UpdateData();


        AllSlots = await _BookingSlotsClient.GetSlotListFwd();
        Slots = AllSlots;
        currentCount = Slots.Count();
        //IdsToDelete = new List<int>();
    }


    async Task DeleteHandler(GridCommandEventArgs args)
    {
        //AppendToLog("Delete", args);

        BookingSlot item = (BookingSlot)args.Item;

        if (item != null){        // perform actual data source operation here through your service
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you wish to delete that booking slot?");
            if (confirmed)
            {
                //Need to find and delete all bookings with that slot. 2Do

                await _BookingSlotsClient.DeleteBookingSlot(item.Id);
                AllSlots = AllSlots = await _BookingSlotsClient.GetSlotListFwd();
                Slots = AllSlots;
                currentCount = Slots.Count();

                /*await Task.Delay(100); // simulate actual long running async operation
                
                // if the grid Data is not tied to the service, you may need to update the local view data too
                IdsToDelete.Add(item.Id);
                Slots.Remove(item);
                currentCount = Slots.Count();*/
            }
        }
    }
    
    /*
    List<int> IdsToDelete = new List<int>();
    async Task CommitAll()
    {
        foreach (int id in IdsToDelete)
        {
            await _BookingSlotsClient.DeleteBookingSlot(id);
        }
        IdsToDelete = new List<int>();
        AllSlots = AllSlots = await _BookingSlotsClient.GetSlotListFwd();
        Slots = AllSlots;
        currentCount = Slots.Count();
    }

    async Task CommitLast()
    {
        if (IdsToDelete.Count() > 0)
        {
            int id = IdsToDelete.Last<int>();
            await _BookingSlotsClient.DeleteBookingSlot(id);
        }
    }

    async Task Refresh()
    {
        IdsToDelete = new List<int>();
        AllSlots = AllSlots = await _BookingSlotsClient.GetSlotListFwd();
        Slots = AllSlots;
        currentCount = Slots.Count();
    }

    void UndoLast()
    {
        if (IdsToDelete.Count() > 0)
        {
            IdsToDelete.RemoveAt(IdsToDelete.Count() - 1);
        }
    }*/


    /// ////////////////////////////

    string Message = "Info";

    bool DatePickerVisible = false;
    bool TimePickerVisible = false;

    DateTime Today_DT;
    LocalDate Today_Local;


    LocalDate BookingDate_Local;
    string ThisDate;
    DateTime BookingDate_DT;

    List<BookingSlot> AllSlots = new List<BookingSlot>();
    List<BookingSlot> Slots = new List<BookingSlot>();


    void UpdateDate()
    {

        ThisDate = BookingDate_DT.ToString("D");
        currentCount = Slots.Count();
        StateHasChanged();
    }

    void UpdateData()
    {

        //var allSlots = await _BookingSlotsClient.GetSlotList();
        UpdateDate();
    }



    async Task ShowSlots()
    {
        AllSlots = await _BookingSlotsClient.GetSlotListFwd();
        for (int i = 0; i < AllSlots.Count; i++)
        {
            DateTime date = AllSlots[i].Date;
            TimeSpan time = AllSlots[i].Time;

            var dayBookings = await _BookingsClient.GetMyBookingsForDay(date, 0);
            AllSlots[i].Count = AthsEssGymBook.Shared.Settings.MaxNumberInRoom - dayBookings.Count(b => time == b);
        }
        Slots = AllSlots;
        currentCount = Slots.Count();
        UpdateData();
    }

    #region Date and Time UI Handlers
    /// UI Handlers /////////////////////////////////////////////////////////////////////////

    void PrevWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;

            int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
            DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
            DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
            var slots = from b in AllSlots where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

            Slots = slots.ToList<BookingSlot>();
            currentCount = Slots.Count();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ThisWeek()
    {
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        DatePickerVisible = false;
        TimePickerVisible = false;

        int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
        DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
        DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
        var slots = from b in AllSlots where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

        Slots = slots.ToList<BookingSlot>();
        UpdateDate();
    }

    void ShowFrom()
    {

        DatePickerVisible = false;
        TimePickerVisible = false;

        var slots = from b in AllSlots where DateTime.Compare(b.Date, BookingDate_DT) >= 0 select b;

        Slots = slots.ToList<BookingSlot>();
        UpdateDate();
    }

    void NextWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(+7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);

            DatePickerVisible = false;
            TimePickerVisible = false;

            int dayOfTheWeek = (int)BookingDate_DT.DayOfWeek;
            DateTime startDate = BookingDate_DT.Subtract(new TimeSpan(dayOfTheWeek, 0, 0, 0, 0));
            DateTime endDate = startDate.Add(new TimeSpan(8, 0, 0, 0, 0));
            var slots = from b in AllSlots where (DateTime.Compare(b.Date, startDate) > 0) && (DateTime.Compare(b.Date, endDate) < 0) select b;

            Slots = slots.ToList<BookingSlot>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void PrevDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            var slots = from sl in AllSlots where sl.Date == BookingDate_DT select sl;
            Slots = slots.ToList<BookingSlot>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ShowToday()
    {
        BookingDate_DT = DateTime.Today;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        DatePickerVisible = false;
        TimePickerVisible = false;
        var slots = from sl in AllSlots where sl.Date == BookingDate_DT select sl;
        Slots = slots.ToList<BookingSlot>();
        UpdateDate();
    }

    void NextDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            var slots = from sl in AllSlots where sl.Date == BookingDate_DT select sl;
            Slots = slots.ToList<BookingSlot>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void DatePickerFocused(FocusEventArgs e)
    {
        DatePickerVisible = true;
        TimePickerVisible = false;
        StateHasChanged();
    }

    void LocaDateSelected(LocalDate localDate)
    {
        BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
        System.Diagnostics.Debug.WriteLine(BookingDate_DT);
        Message = "";
        if (BookingDate_DT >= DateTime.Today)
        {
            BookingDate_Local = localDate;
            DatePickerVisible = false;
            TimePickerVisible = false;
            var slots = from sl in AllSlots where sl.Date == BookingDate_DT select sl;
            Slots = slots.ToList<BookingSlot>();
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    #endregion

}

@page "/Admin"

@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@inject AthsEssGymBook.Client.Services.AthleteClient athleteClient

@inject Services.BookingSlotsClient _BookingSlotsClient

@inject IJSRuntime JsRuntime
    <h3><font color="blue">Administration:</font></h3>
    <AuthorizeView>
        <Authorized>


            <ul>
                <li>
                    Add Booking Slots: <b><i>Done</i></b>
                </li>
                <li>
                    Limited to only admin people <b><i>Done</i></b>
                </li>
                <li>
                    List Slots: In public page.
                </li>
                <li>
                    Disable or delete users and/or their bookings.
                </li>
                <li>
                    Delete all bookings for a day, week, month, all. <b><i>Done</i></b>
                </li>
                <li>
                    Change settings
                </li>
                <li>
                    Backup and restore the database
                </li>
                <li>
                    Enable/ diable the app for all others
                </li>
                <li>
                    Set user roles to admin,coach,user.  Indicate if user has a pass.
                </li>

            </ul>
            <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" />
            <DatePicker Style="opacity:1" SelectedDate="BookingDate_Local" Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today_Local" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />

            <table class="table2">
                <tbody>
                    <tr>
                        <td align="right"><font color="red"><b>Day:&nbsp;</b></font></td>
                        <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevDay"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ShowToday"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextDay"></TelerikButton></td>
                    </tr>
                    <tr>
                        <td align="right"><font color="red"><b>Week:&nbsp;</b></font></td>
                        <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevWeek"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ShowToday"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextWeek"></TelerikButton></td>
                    </tr>
                    <tr>
                        <td colspan="4">
                            <p>&nbsp;</p>
                            Click here to set the <b><i>Booking Time Slot:</i></b><br />
                            <input type="text" @onfocus=@TimePickerFocused value=@BookTime_TS />
                            <TimePicker MinuteStep="30" Visible=TimePickerVisible OnSelectedTimeChanged=@LocalTimeChanged ShowClose=true CloseOnSelect=true SelectedTime="BookTime_Local" />
                        </td>
                    </tr>
                    <tr>
                        <td align="right"><font color="blue"><b>Slot:&nbsp;</b></font></td>
                        <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevTimeSlot"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-media-step-backward" @onclick="@StartTimeSlot"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextTimeSlot"></TelerikButton></td>
                    </tr>
                    <tr><td colspan="4"><h3>Add or Delete Slots</h3></td></tr>
                    <tr>
                        <td align="right"><font color="blue"><b><i>Add:&nbsp;</i></b></font></td>
                        <td><button id="min30" class="btn btn-primary" @onclick="@AddCurrentTimeSlot">Time Sot</button></td>
                        <td><button id="min60" class="btn btn-primary" @onclick="@AddCurrentDaySlots">Day</button></td>
                        <td><button id="min90" class="btn btn-primary" @onclick="@AddCurrentWeekSlots">Week</button></td>
                    </tr>
                    <tr>
                        <td align="right"><font color="red"><b><i>Delete:&nbsp;</i></b></font></td>
                        <td><button id="min30" class="btn btn-primary" @onclick="@DeleteCurrentTimeSlot">Time Slot</button></td>
                        <td><button id="min60" class="btn btn-primary" @onclick="@DeleteCurrentDaySlots">Day</button></td>
                        <td><button id="min90" class="btn btn-primary" @onclick="@DeleteCurrentWeekSlots">Week</button></td>
                    </tr>
                </tbody>
            </table>
            {
            <TelerikGrid Data="@Slots"
                         Pageable="true" PageSize="10" Sortable="true" Groupable="true"
                         Resizable="true" Reorderable="true">
                <GridColumns>
                    <GridColumn Field=@nameof(BookingSlot.Id) Title="Id" Editable="false" />
                    <GridColumn Field=@nameof(BookingSlot._Date) Title="Date" Editable="false" />
                    <GridColumn Field=@nameof(BookingSlot.Time) Title="Time" Editable="false" />
                </GridColumns>
            </TelerikGrid>
            }
        </Authorized>
        <Authorizing>
            <h1>Please wait. Loading ...</h1>
        </Authorizing>
    </AuthorizeView>

    @code {

    bool bIsAdmin = false;
    bool bHasAccessCard = false;
    bool bIsCoach = false;
    bool bCanSetSlots = false;
    string UserName;
    AuthenticationState context { get; set; }

    List<BookingSlot> AllSlots = new List<BookingSlot>();
    List<BookingSlot> Slots = new List<BookingSlot>();


    string Message = "Info";

    bool DatePickerVisible = false;
    bool TimePickerVisible = false;

    DateTime Today_DT;
    LocalDate Today_Local;


    LocalDate BookingDate_Local;
    string ThisDate;
    DateTime BookingDate_DT;
    TimeSpan BookTime_TS;
    LocalTime BookTime_Local;

    void UpdateDate()
    {
        ThisDate = BookingDate_DT.ToString("D");
        StateHasChanged();
    }

    async Task UpdateData()
    {

        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        UpdateDate();
    }

    protected override async Task OnInitializedAsync()
    {

        context = await authStateProvider.GetAuthenticationStateAsync();
        UserName = context.User.Identity.Name;

        Athlete user = await athleteClient.GetAthlete(UserName);
        if (user.IsAdmin)
        {
            bIsAdmin = true;
            bHasAccessCard = true;
            bCanSetSlots = true;
        }
        else
        {
            bIsAdmin = user.IsAdmin;
            bHasAccessCard = user.HasAccessCard;
            bIsCoach = user.IsCoach;
            bCanSetSlots = user.CanSetSlots;
        }

        if (!bIsAdmin)
            navigationManager.NavigateTo("/");



        Today_DT = DateTime.Today;
        Today_Local = new LocalDate(Today_DT.Year, Today_DT.Month, Today_DT.Day);
        BookingDate_DT = DateTime.Today;
        BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);

        await UpdateData();
    }

    #region Date and Time UI Handlers
    /// UI Handlers /////////////////////////////////////////////////////////////////////////

    void PrevWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateData();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }
    void NextWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(+7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void PrevDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            StateHasChanged();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ShowToday()
    {
        var bookingDate_DT = DateTime.Today;
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void NextDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void PrevTimeSlot()
    {
        BookTime_TS = BookTime_TS.Subtract(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void StartTimeSlot()
    {
        BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void NextTimeSlot()
    {
        BookTime_TS = BookTime_TS.Add(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void DatePickerFocused(FocusEventArgs e)
    {
        DatePickerVisible = true;
        TimePickerVisible = false;
        StateHasChanged();
    }

    async Task LocaDateSelected(LocalDate localDate)
    {
        BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
        System.Diagnostics.Debug.WriteLine(BookingDate_DT);
        Message = "";
        if (BookingDate_DT >= DateTime.Today)
        {
            BookingDate_Local = localDate;
            DatePickerVisible = false;
            TimePickerVisible = false;
            StateHasChanged();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void TimePickerFocused()
    {
        TimePickerVisible = true;
        DatePickerVisible = false;
        StateHasChanged();
    }

    void LocalTimeChanged(LocalTime time)
    {
        BookTime_TS = new TimeSpan(time.Hour, time.Minute, 0);
        BookTime_Local = time;
        StateHasChanged();

    }

    #endregion

    #region Data Add and Delete
    /// DaTA /////////////////////////////////////////////////////////////////////////

    #region Add Slots
    async Task AddaTimeSlot(DateTime date, TimeSpan time)
    {
        BookingSlot slot = new BookingSlot { Date = date, Time = time };
        await _BookingSlotsClient.AddBookingSlot(slot);
    }

    async Task AddSlotsForDay(DateTime date)
    {

        TimeSpan time = AthsEssGymBook.Shared.Settings.OpenHour;
        TimeSpan endtime = AthsEssGymBook.Shared.Settings.CloseHour;
        TimeSpan incr = new TimeSpan(0, 30, 0);

        var c = TimeSpan.Compare(time, endtime);

        for (int i = 0; TimeSpan.Compare(time, endtime) < 0; i++)
        {
            await AddaTimeSlot(date, time);
            time = time.Add(incr);
        }
        var slots = await _BookingSlotsClient.GetSlotList();
    }
    #endregion

    #region Delete Slots
    async Task DeleteaTimeSlot(DateTime bookingDate_DT, TimeSpan bookTime_TS)
    {
        int id = await _BookingSlotsClient.GetBookingSlotId(bookingDate_DT, bookTime_TS);
        if (id > 0)
        {
            await _BookingSlotsClient.DeleteBookingSlot(id);
        }
    }

    async Task DeleteSlotsForDay(DateTime bookingDate_DTS)
    {
        var slots = await _BookingSlotsClient.GetSlotList();
        var slots4Day = from s in slots where s.Date == bookingDate_DTS select s;
        foreach (var s in slots4Day)
        {
            await DeleteaTimeSlot(s.Date, s.Time);
        }
    }
    #endregion

    #endregion

    #region UI Slots Handlers

    #region UI Add Slots Handlers
    /// UI Calls to add slots //////////////////////////////////////////////////////

    async Task AddCurrentDaySlots()
    {
        await AddSlotsForDay(BookingDate_DT);
    }

    async Task AddCurrentTimeSlot()
    {
        await AddaTimeSlot(BookingDate_DT, BookTime_TS);
    }

    async Task AddCurrentWeekSlots()
    {
        DateTime today = DateTime.Today;
        int dayofWeek = (int)today.DayOfWeek;
        DateTime monday = today.AddDays(-dayofWeek + 1);
        foreach (int openDay in AthsEssGymBook.Shared.Settings.OpenDays)
        {
            DateTime day = monday.AddDays(openDay - 1);
            await AddSlotsForDay(day);
        }
    }
    #endregion

    #region UI Delete Slots Handlers
    /// UI Calls to delete slots //////////////////////////////////////////////////////

    async Task DeleteCurrentDaySlots()
    {
        await DeleteSlotsForDay(BookingDate_DT);
    }

    async Task DeleteCurrentTimeSlot()
    {
        await DeleteaTimeSlot(BookingDate_DT, BookTime_TS);
    }

    async Task DeleteCurrentWeekSlots()
    {
        DateTime today = DateTime.Today;
        int dayofWeek = (int)today.DayOfWeek;
        DateTime monday = today.AddDays(-dayofWeek + 1);
        foreach (int openDay in AthsEssGymBook.Shared.Settings.OpenDays)
        {
            DateTime day = monday.AddDays(openDay - 1);
            await DeleteSlotsForDay(day);
        }
    }
    #endregion

    #endregion
    }



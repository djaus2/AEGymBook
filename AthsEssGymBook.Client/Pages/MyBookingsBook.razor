@page "/MyBookingsBook"
@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject Services.BookingSlotsClient _BookingSlotsClient
@inject Services.BookingsClient BookingsClient

@inject IJSRuntime JsRuntime
    <h3><font color="blue">Make a Gym Booking</font></h3>
    <AuthorizeView>
        <Authorized>
            <table class="table2">
                <tbody>
                    <tr>
                        <td colspan="4">
                            <b><i><font color="red">@Message</font></i></b>
                        </td>
                        </tr>
                    <tr>
                        <td colspan="3">
                            <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" /> 
                            <DatePicker Style="opacity:1" SelectedDate="BookingDate_Local" Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today_Local" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td align="right"><font color="blue"><b>Day:&nbsp;</b></font></td>
                        <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevDay"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ShowToday"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextDay"></TelerikButton></td>
                    </tr>
                    <tr>
                        <td align="right"><font color="red"><b>Week:&nbsp;</b></font></td>
                        <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevWeek"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-media-stop" @onclick="@ThisWeek"></TelerikButton></td>
                        <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextWeek"></TelerikButton></td>
                    </tr>
                    @*<tr>
            <td colspan="4">
                <p>&nbsp;</p>
                Click here to set the <b><i>Booking Time Slot:</i></b><br />
                <input type="text" @onfocus=@TimePickerFocused value=@BookTime_TS />
                <TimePicker MinuteStep="30" Visible=TimePickerVisible OnSelectedTimeChanged=@LocalTimeChanged ShowClose=true CloseOnSelect=true SelectedTime="BookTime_Local" />
            </td>>
        </tr>*@
                    @*<tr>
            <td align="right"><font color="blue"><b>Slot:&nbsp;</b></font></td>
            <td><TelerikButton IconClass="oi oi-caret-left" @onclick="@PrevTimeSlot"></TelerikButton></td>
            <td><button class="btn btn-primary" disabled="@IsDisabled30" @onclick="@BookMe30">BOOK 30</button></td>
            <td><TelerikButton IconClass="oi oi-caret-right" @onclick="@NextTimeSlot"></TelerikButton></td>
        </tr>
        <tr>
            <td align="right"><font color="blue"><b>Longer Book:&nbsp;</b></font></td>
            <td><button id="min30" class="btn btn-primary" disabled="@IsDisabled60" @onclick="@BookMe60">1 hour</button></td>
            <td><button id="min60" class="btn btn-primary" disabled="@IsDisabled90" @onclick="@BookMe90">90 min</button></td>
            <td><button id="min90" class="btn btn-primary" disabled="@IsDisabled120" @onclick="@BookMe120">2 hours</button></td>
        </tr>*@
                </tbody>
            </table>

            @if (TodaysSlots == null)
            {
                <p><em>Please wait. Loading...</em></p>
            }
            else
            {
                <TelerikGrid Data="@TodaysSlots"
                             Pageable="true" PageSize="10" Sortable="true" Groupable="false"
                             OnEdit="@BookHandler"
                             Resizable="true" Reorderable="true">
                    <GridColumns>
                        <GridColumn Field=@nameof(BookingSlot.Id) Title="Id" Editable="false" />
                        <GridColumn Field=@nameof(BookingSlot._Date) Title="Date" Editable="false" />
                        <GridColumn Field=@nameof(BookingSlot.Time) Title="Time" Editable="false" />
                        <GridColumn Field=@nameof(BookingSlot.Count) Title="Count" Editable="false" />
                        <GridCommandColumn>
                            <GridCommandButton Command="Edit" Icon="Add">Book Me</GridCommandButton>
                        </GridCommandColumn>
                    </GridColumns>
                </TelerikGrid>
            }

        </Authorized>
        <Authorizing>
            <h1>Please wait. Loading ...</h1>
        </Authorizing>
    </AuthorizeView>



    @functions {


        async Task BookHandler(GridCommandEventArgs args)
        {
            DatePickerVisible = false;
            TimePickerVisible = false;

            BookingInfo booking = new BookingInfo();
            booking.AthleteId = LoggegInAthlete.Id;
            booking._Duration = 1;

            BookingSlot item = (BookingSlot)args.Item;
            if (item != null)
            {        // perform actual data source operation here through your service
                await Task.Delay(100); // simulate actual long running async operation
                if (item.Count == 0)
                {
                    return;
                }


                booking.Date = item.Date;
                System.Diagnostics.Debug.WriteLine(booking.Date);

                booking.Time = item.Time;

                try
                {
                    await BookingsClient.AddBooking(booking);
                    //await RefreshMyData(BookingDate_DT, BookTime_TS);
                    Message = $"Just booked you.";
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    System.Diagnostics.Debug.WriteLine(ex.InnerException);
                    Message = $"Booking failed.";
                }
                item.Count--;
                await ShowSlots();
                await RefreshMyData(BookingDate_DT, BookTime_TS);
                StateHasChanged();

                await JsRuntime.InvokeAsync<bool>("alert", "The Booking has been made for you.");

            }
        }


        AuthenticationState context { get; set; }
        List<BookingInfo> MyBookings { get; set; }
        BookingInfo MyBooking { get; set; }
        Athlete LoggegInAthlete { get; set; }
        List<BookingSlot> Slots = new List<BookingSlot>();
        List<BookingSlot> TodaysSlots = new List<BookingSlot>();
        List<int> MySlotsIds = new List<int>();

        BookingSlot Slot { get; set; }

        int currentCount = Settings.MaxNumberInRoom;
        int showCount = 0;
        string showCountStrn = "";
        string Message = "Info";

        bool DatePickerVisible = false;
        bool TimePickerVisible = false;

        DateTime Today_DT;
        LocalDate Today_Local;


        LocalDate BookingDate_Local;
        string ThisDate;
        DateTime BookingDate_DT;
        TimeSpan BookTime_TS;
        LocalTime BookTime_Local;

        TimeSpan Increment;


        protected override async Task OnInitializedAsync()
        {
            Busy();
            Increment = new TimeSpan(0, AthsEssGymBook.Shared.Settings.TimeUnitMinutes, 0);
            Today_DT = DateTime.Today;
            Today_Local = new LocalDate(Today_DT.Year, Today_DT.Month, Today_DT.Day);
            BookingDate_DT = DateTime.Today;

            BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);

            context = await authStateProvider.GetAuthenticationStateAsync();
            string name = context.User.Identity.Name;

            LoggegInAthlete = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{name}");
            StateHasChanged();
            TimePickerVisible = false;

            await ShowSlots();

            await RefreshMyData(BookingDate_DT, BookTime_TS);
            UpdateDate();
            StateHasChanged();
        }



        async Task ShowSlots()
        {

            Slots = await _BookingSlotsClient.GetSlotListFwd();
            foreach (BookingSlot slot in Slots)
            {
                DateTime date = slot.Date;
                TimeSpan time = slot.Time;

                var dayBookings = await BookingsClient.GetMyBookingsForDay(date, 0);
                slot.Count = AthsEssGymBook.Shared.Settings.MaxNumberInRoom - dayBookings.Count(b => time == b);
            }
            //var mySlotsIds = from slt in MyBookings select slt.Slots;
            //Ref: https://stackoverflow.com/a/14395645/5478795
            // MySlotsIds = mySlotsIds.SelectMany(d => d).ToList();
            TodaysSlots = (from sl in Slots where sl.Date == BookingDate_DT select sl).ToList<BookingSlot>();
        }

        void UpdateAvailable(TimeSpan bookingTime_TS)
        {

            var myBooking = from bk in MyBookings
                            where (bk.Date == BookingDate_DT) && (bk.Time == BookTime_TS)
                            select bk;
            MyBooking = myBooking.FirstOrDefault<BookingInfo>();
            if (MyBooking != null)
            {
                Message = "You already have a booking at this time.";
                return;
            } else
            {
                showCount = -1;
                TimeSpan incr = new TimeSpan(0, 30, 0);

                for (int i = 0; i < 4; i++)
                {
                    if (i != 0)
                        bookingTime_TS = bookingTime_TS.Add(incr);
                    BookingSlot slot = (from slt in Slots where (slt.Date == BookingDate_DT) && (slt.Time == bookingTime_TS) select slt).FirstOrDefault<BookingSlot>();

                }

                if (showCount == 0)
                {
                    showCountStrn = "0";
                    Message = "No bookings available at this time.";
                }
                else if (showCount == -1)
                {
                    showCountStrn = "-";
                    Message = "This time slot isn't available.";
                }
                else
                {
                    showCountStrn = $"{showCount}";
                    Message = "Some bookings available at this time.";
                }
                StateHasChanged();
            }

        }

        void UpdateDate()
        {
            Done();
            ThisDate = BookingDate_DT.ToString("D");
            StateHasChanged();
        }

        async Task RefreshData(DateTime bookingdate, TimeSpan booktime_TS)
        {
            ThisDate = bookingdate.ToString("D");
            MyBookings = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
            UpdateAvailable(booktime_TS);

        }

        async Task RefreshMyData(DateTime bookingdate, TimeSpan booktime_TS)
        {
            MyBookings = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
            await RefreshData(BookingDate_DT, BookTime_TS);
        }



        async Task PrevDay()
        {
            BookingDate_DT = BookingDate_DT.AddDays(-1);
            Message = "";
            if (BookingDate_DT >= DateTime.Today)
            {
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                DatePickerVisible = false;
                StateHasChanged();
                TimePickerVisible = false;
                await RefreshData(BookingDate_DT, BookTime_TS);
                await ShowSlots();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        async Task ShowToday()
        {
            BookingDate_DT = DateTime.Today;
            Message = "";
            if (BookingDate_DT >= DateTime.Today)
            {
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                DatePickerVisible = false;
                StateHasChanged();
                TimePickerVisible = false;
                await RefreshData(BookingDate_DT, BookTime_TS);
                await ShowSlots();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        async Task NextDay()
        {
            BookingDate_DT = BookingDate_DT.AddDays(1);
            Message = "";
            if (BookingDate_DT >= DateTime.Today)
            {
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                DatePickerVisible = false;
                StateHasChanged();
                TimePickerVisible = false;
                await RefreshData(BookingDate_DT, BookTime_TS);
                await ShowSlots();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        void PrevTimeSlot()
        {
            BookTime_TS = BookTime_TS.Subtract(new TimeSpan(0, 30, 0));
            BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
            StateHasChanged();
            TimePickerVisible = false;
            UpdateAvailable(BookTime_TS);
        }

        void NextTimeSlot()
        {
            BookTime_TS = BookTime_TS.Add(new TimeSpan(0, 30, 0));
            BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
            StateHasChanged();
            TimePickerVisible = false;
            UpdateAvailable(BookTime_TS);
        }


        BookingSlot GetSlotId(DateTime bookingDate_DT, TimeSpan bookingTime_TS)
        {
            var slot = from slt  in Slots where (slt.Date == bookingDate_DT ) && (slt.Time == bookingTime_TS) select slt;
            if (slot.Count<BookingSlot>() == 0)
            {
                return null;
            }
            BookingSlot bs = slot.FirstOrDefault();
            return bs;
        }


        async Task BookMe(int _duration)
        {

            showCount = currentCount;
            DatePickerVisible = false;
            TimePickerVisible = false;

            BookingInfo booking = new BookingInfo();
            booking.AthleteId = LoggegInAthlete.Id;
            booking._Duration = _duration;

            // Provisionally reserve each required slot.
            // Slots should be available when get here though.
            // But check anyway.
            // Might not be available because:
            // - Slot not enabled
            // - Slot fully booked
            List<BookingSlot> slots = new List<BookingSlot>();
            for (int i = 0; i < _duration; i++)
            {
                BookingSlot slot = GetSlotId(BookingDate_DT, BookTime_TS);
                if (slot == null)
                {
                    //Not available
                    Message = $"Time Slot not available {i}";
                    StateHasChanged();
                    // Undo reserved Booking Slots
                    foreach (BookingSlot _slot in slots)
                    {
                        _slot.Count++;
                    }
                    break;
                }
                else if (slot.Count==0)
                {
                    //Not available
                    Message = $"Time Slot fully booked {i}";
                    StateHasChanged();
                    // Undo reserved Booking Slots
                    foreach (var _slot in slots)
                    {
                        _slot.Count++;
                    }
                    break;
                }
                // Reserve Booking Slot
                slot.Count--;
                slots.Add(slot);
                booking.Slots.Add(slot.Id);
            }
            booking.Date = BookingDate_DT;
            System.Diagnostics.Debug.WriteLine(booking.Date);

            booking.Time = BookTime_TS;

            try
            {
                await BookingsClient.AddBooking(booking);
                //await RefreshMyData(BookingDate_DT, BookTime_TS);
                Message = $"Just booked you.";
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
                System.Diagnostics.Debug.WriteLine(ex.InnerException);
                Message = $"Booking failed.";
                //foreach (var _slot in booking.Slots)
                //{
                //    _slot.Count++;
                //}
            }
            await ShowSlots();
            await RefreshMyData(BookingDate_DT, BookTime_TS);
            await ShowSlots();
        }

        async Task DeleteBooking(int id)
        {
            await ShowSlots();
            await BookingsClient.DeleteBooking(id);
            await RefreshMyData(BookingDate_DT, BookTime_TS);
            Message = "Booking Deleted";
            DatePickerVisible = false;
            TimePickerVisible = false;
        }

        void DatePickerFocused(FocusEventArgs e)
        {
            DatePickerVisible = true;
            TimePickerVisible = false;
        }

        async Task LocaDateSelected(LocalDate localDate)
        {
            BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
            System.Diagnostics.Debug.WriteLine(BookingDate_DT);
            Message = "";
            if (BookingDate_DT >= DateTime.Today)
            {
                BookingDate_Local = localDate;
                DatePickerVisible = false;
                StateHasChanged();
                TimePickerVisible = false;
                await RefreshData(BookingDate_DT, BookTime_TS);
                await ShowSlots();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        void TimePickerFocused()
        {
            TimePickerVisible = true;
            DatePickerVisible = false;
        }

        void LocalTimeChanged(LocalTime time)
        {
            BookTime_TS = new TimeSpan(time.Hour, time.Minute, 0);
            BookTime_Local = time;
            StateHasChanged();
            UpdateAvailable(BookTime_TS);
        }

        async Task DeleteExistingBooking(int id)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "You already have that booking.Do you wish to delete it?");
            if (confirmed)
            {
                await DeleteBooking(id);
            }
        }


        /// //////////////////////////////////////////////

        async Task NextWeek()
        {
            var bookingDate_DT = BookingDate_DT.AddDays(+7);
            Message = null;
            if (bookingDate_DT >= DateTime.Today)
            {
                Busy();
                BookingDate_DT = bookingDate_DT;
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                await ShowSlots();
                UpdateDate();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        async Task ThisWeek()
        {
            Message = null;
            var bookingDate_DT = DateTime.Today;
            if (bookingDate_DT >= DateTime.Today)
            {
                Busy();
                BookingDate_DT = bookingDate_DT;
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                await ShowSlots();
                UpdateDate();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        async Task PrevWeek()
        {
            Message = null;
            var bookingDate_DT = BookingDate_DT.AddDays(-7);
            Message = "";
            if (bookingDate_DT >= DateTime.Today)
            {
                Busy();
                BookingDate_DT = bookingDate_DT;
                BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
                await ShowSlots();
                UpdateDate();
            }
            else
            {
                Message = "Please select a date today or in the future.";
            }
        }

        void Busy()
        {
            Message = "Please wait, getting data";
            StateHasChanged();
        }
        void Done()
        {
            Message = null;
            StateHasChanged();
        }


    }





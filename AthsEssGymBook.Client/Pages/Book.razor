@page "/Book"
@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject Services.BookingsClient BookingsClient

@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <h3>Make a Gym Booking</h3>
        <h3>
            Hello @context.User.Identity.Name
        </h3>
        <p>@Message</p>

        <p>Click here to choose the <b><i>Booking Date:</i></b></p>
        <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" />
        <DatePicker Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />

        <p></p>
        <p>Click here to set the <b><i>Booking Start Time:</i></b></p>
        <input type="text" @onfocus=@TimePickerFocused value=@BookTime_TS />
        <TimePicker  MinuteStep="30" Visible=TimePickerVisible OnSelectedTimeChanged=@LocalTimeChanged ShowClose=true CloseOnSelect=true SelectedTime=@BookTime_Local />

        <p></p>
        <button class="btn btn-primary" @onclick="@PrevTimeSlot">Prev</button>&nbsp;
        <button class="btn btn-primary" @onclick="@BookMe">Book</button>&nbsp;
        <button class="btn btn-primary" @onclick="@NextTimeSlot">Next</button>
        <br />
        <br />
        <p>Available Booking Slots: @showCount out of 4</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
    </Authorized>
    <Authorizing>
        <h1>Please wait. Loading ...</h1>
    </Authorizing>
</AuthorizeView>



@functions {

    AuthenticationState context { get; set; }
    List<BookingInfo> MyBookings { get; set; }
    Athlete LoggegInAthlete { get; set; }
    List<Athlete> Athletes { get; set; }

    Dictionary<TimeSpan, int> BookingCounts { get; set; }
    List<TimeSpan> MyBookingTimes { get; set; } = new List<TimeSpan>();

    LocalDate Today;

    int currentCount = Settings.MaxNumberInRoom;
    int showCount = 0;
    string Message = "Info";

    bool DatePickerVisible = false;
    bool TimePickerVisible = false;


    LocalDate BookingDate_Local;
    string ThisDate;
    DateTime BookingDate_DT;
    TimeSpan BookTime_TS;
    LocalTime BookTime_Local;

    void UpdateAvailable(TimeSpan booktime_TS)
    {
        showCount = AthsEssGymBook.Shared.Settings.MaxNumberInRoom;
        if (BookingCounts.Keys.Contains(booktime_TS))
        {
            showCount = showCount - BookingCounts[booktime_TS];
        }
        if (showCount == 0)
            Message = "No bookings available at this time.";
        else
            Message = "Some bookings available at this time.";
        StateHasChanged();
    }

    async Task RefreshData(DateTime bookingdate, TimeSpan booktime_TS)
    {
        ThisDate = bookingdate.ToString("D");
        MyBookings = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
        BookingCounts = await BookingsClient.GetBookingCountForDay(bookingdate);
        MyBookingTimes = await BookingsClient.GetMyBookingsForDay(bookingdate, LoggegInAthlete.Id);
        UpdateAvailable(booktime_TS);
    }

    async Task RefreshMyData(DateTime bookingdate, TimeSpan booktime_TS)
    {
        MyBookings = await BookingsClient.GetBookingList(LoggegInAthlete.Id);
        await RefreshData(BookingDate_DT, BookTime_TS);
    }

    protected override async Task OnInitializedAsync()
    {

        BookingDate_DT = DateTime.Today;
        BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);

        context = await authStateProvider.GetAuthenticationStateAsync();
        string name = context.User.Identity.Name;
        var vathletes = await Http.GetFromJsonAsync<Athlete[]>("api/Athletes");
        Athletes = vathletes.ToList<Athlete>();
        LoggegInAthlete = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{name}");
        StateHasChanged();
        TimePickerVisible = false;

        await RefreshMyData(BookingDate_DT,BookTime_TS);
    }


    void PrevTimeSlot()
    {
        BookTime_TS = BookTime_TS.Subtract(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        UpdateAvailable(BookTime_TS);
    }

    void NextTimeSlot()
    {
        BookTime_TS = BookTime_TS.Add(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        UpdateAvailable(BookTime_TS);
    }

    async Task BookMe()
    {

        showCount = currentCount;
        DatePickerVisible = false;
        TimePickerVisible = false;

        BookingInfo info = new BookingInfo();
        info.AthleteId = LoggegInAthlete.Id;

        info.Slot = 5 - currentCount;
        info.Date = BookingDate_DT;
        System.Diagnostics.Debug.WriteLine(info.Date);

        info.Time = BookTime_TS;
        info._Duration = 2;
        if (MyBookingTimes.Contains(info.Time))
        {
            if (!AthsEssGymBook.Shared.Settings.FORDEVONLY_User_Can_book_more_than_once_at_one_time)
            {
                Message = "You already have this booking!";
                int id = (from b in MyBookings where b.Time == info.Time select b.Id).FirstOrDefault<int>();
                System.Diagnostics.Debug.WriteLine("===={0}====",id);
                await DeleteExistingBooking(id);
                return;
            }
        }
        int count = 0;
        if (BookingCounts.Keys.Contains<TimeSpan>(info.Time))
        {
            count = BookingCounts[info.Time];
        }
        if (count < AthsEssGymBook.Shared.Settings.MaxNumberInRoom)
        {
            try
            {
                await BookingsClient.AddBooking(info);
                await RefreshMyData(BookingDate_DT, BookTime_TS);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
                System.Diagnostics.Debug.WriteLine(ex.InnerException);
            }
            Message = $"Just booked you.";
        }
        else
        {
            Message = "No bookings available at this time.";
            showCount = 0;
        }

    }



    async Task DeleteBooking(int id)
    {
        await BookingsClient.DeleteBooking(id);
        await RefreshMyData(BookingDate_DT, BookTime_TS);
        Message = "Booking Deleted";
        DatePickerVisible = false;
        TimePickerVisible = false;
    }

    void DatePickerFocused(FocusEventArgs e)
    {
        DatePickerVisible = true;
        TimePickerVisible = false;
    }


    async Task LocaDateSelected(LocalDate localDate)
    {
        BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
        System.Diagnostics.Debug.WriteLine(BookingDate_DT);
        Message = "";
        if (BookingDate_DT >= DateTime.Today)
        {
            BookingDate_Local = localDate;
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            await RefreshData(BookingDate_DT, BookTime_TS);
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void TimePickerFocused()
    {
        TimePickerVisible = true;
        DatePickerVisible = false;
    }

    void LocalTimeChanged(LocalTime time)
    {
        BookTime_TS = new TimeSpan(time.Hour, time.Minute, 0);
        BookTime_Local = time;
        StateHasChanged();
        UpdateAvailable(BookTime_TS);
    }

    async Task DeleteExistingBooking(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "You already have that booking.Do you wish to delete it?");
        if (confirmed)
        {
            await DeleteBooking(id);
        }
    }

}





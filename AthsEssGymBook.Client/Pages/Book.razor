@page "/Book"
@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject Services.BookingsClient Client

<AuthorizeView>
    <Authorized>
        <h3>Make a Gym Booking</h3>
        <h3>Hello @context.User.Identity.Name !!!!</h3>

        <p>Click here to choose the <b><i>>Booking Date:</i></b></p>
        <input id="Date" value=@ThisDate type="text" @onfocus="@focussed2" />
        <DatePicker Visible="datePicker2Visible" OnSelected="selected2" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />

        <p></p>
        <p>Click here to set the <b><i>Booking Start Time:</i></b></p>
        <input type="text" @onfocus=@focussed4 value=@selectedTime4 />
        <TimePicker MinuteStep="30" Visible=visible4 OnSelectedTimeChanged=@changed4 ShowClose=true CloseOnSelect=true />

        <p></p>
        <button class="btn btn-primary" @onclick="@CheckAvailability">Check availability</button>&nbsp;
        <button class="btn btn-primary" @onclick="@BookMe">Book</button>&nbsp;
        <button class="btn btn-primary" @onclick="@UnBookMe">UnBook</button>
        <br />
        <br />
        <p>Available Booking Slots: @showCount out of 4</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>...</p>
        <p>@Message</p>



        @functions {

            AuthenticationState context { get; set; }
            List<BookingInfo> Bookings { get; set; }
            Athlete LoggegInAthlete { get; set; }
            List<Athlete> Athletes { get; set; }

            protected override async Task OnInitializedAsync()
            {

                context = await authStateProvider.GetAuthenticationStateAsync();
                string name = context.User.Identity.Name;
                var vathletes = await Http.GetFromJsonAsync<Athlete[]>("api/Athletes");
                Athletes = vathletes.ToList<Athlete>();
                string id2 = "137";
                var LoggegInAthlete1 = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{id2}");
                string name2 = "azsx";
                LoggegInAthlete = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{name2}");


                var vBookings = await Http.GetFromJsonAsync<BookingInfo[]>("api/BookingInfos");
                Bookings = vBookings.ToList<BookingInfo>();
                //int id = 1;
                //var vBooking = await Http.GetFromJsonAsync<BookingInfo>($"api/BookingInfos/{id}");
            }



            //Athlete usr2;

            //protected override async Task OnInitializedAsync()
            //{
            //    // var zx = await Http.GetFromJsonAsync<string>("api/Bookings/getName?name=djaus");
            //    bool count = await Http.GetFromJsonAsync<bool>("api/Bookings/Count?name=djaus");
            //}

            int currentCount = Settings.MaxNumberInRoom;
            int showCount = 0;
            string Message = "Info";

            bool datePicker2Visible = false;
            bool visible4 = false;


            LocalDate Bookingdate;  // = System.DateTime.Today;
            string ThisDate = System.DateTime.Today.ToString("D");

            DateTime bookDate;

            TimeSpan bookTime;


            LocalTime selectedTime4;


            void CheckAvailability()
            {
                showCount = currentCount;
                datePicker2Visible = false;
                visible4 = false;
            }

            async Task BookMe()
            {
                if (currentCount > 0)
                {
                    currentCount--;
                }
                showCount = currentCount;
                datePicker2Visible = false;
                visible4 = false;

                BookingInfo info = new BookingInfo();
                //string AthleteName = "Me"; //context.Athlete.Identity.Name;
                //var AthleteInfo =  GetAthleteInfo();
                //info.Athlete = new AthleteInfo();

                //var xx = await authStateProvider.GetAuthenticationStateAsync();
                //var usr = xx.Athlete;
                //var name = usr.Identity.Name;
                //info.User = new Athlete();
                info.AthleteId = LoggegInAthlete.Id;

                info.Slot = 1;
                info.Date = bookDate;
                info.Time = bookTime;
                info._Duration = 2;

                //BookingInfo_SQL infor_sql = new BookingInfo_SQL(info);

                //await Client.AddBooking(info);

                //await Http.PostAsJsonAsync("api/TodoItems", info);
                try
                {
                    var bookings = Http.GetFromJsonAsync<BookingInfo>("api/BookingInfos");
                    await Http.PostAsJsonAsync("api/BookingInfos", info);

                } catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                    System.Diagnostics.Debug.WriteLine(ex.InnerException);
                }

            }

            void UnBookMe()
            {
                if (currentCount < 4)
                {
                    currentCount++;
                }
                showCount = currentCount;
                datePicker2Visible = false;
                visible4 = false;
            }

            void focussed2(FocusEventArgs e)
            {
                datePicker2Visible = true;
                visible4 = false;
            }


            void selected2(LocalDate localDate)
            {
                bookDate = new DateTime(localDate.Year, localDate.Month, localDate.Day);
                Message = "";
                if (bookDate >= DateTime.Today)
                {
                    Bookingdate = localDate;
                    ThisDate = localDate.ToString();
                    datePicker2Visible = false;
                    StateHasChanged();
                    visible4 = true;

                    CheckAvailability();
                }
                else
                {
                    Message = "Please select a date today or in the future.";
                }
            }

            void focussed4()
            {
                visible4 = true;
                datePicker2Visible = false;
            }

            void changed4(LocalTime time)
            {
                bookTime = new TimeSpan(time.Hour, time.Minute, 0);
                selectedTime4 = time;
                StateHasChanged();
            }
        }

    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>



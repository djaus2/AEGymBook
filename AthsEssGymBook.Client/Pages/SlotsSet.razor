@page "/CanSetSlots"

@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@inject AthsEssGymBook.Client.Services.AthleteClient athleteClient

@inject Services.BookingSlotsClient _BookingSlotsClient

@inject IJSRuntime JsRuntime
<h3><font color="blue">Set Time Slots available for booking:</font></h3>
<AuthorizeView>
    <Authorized>
        <input id="Date" value=@ThisDate type="text" @onfocus="@DatePickerFocused" />
        <DatePicker Style="opacity:1" SelectedDate="BookingDate_Local" Visible="DatePickerVisible" OnSelected="LocaDateSelected" MinDate="@Today_Local" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />

        <table class="table2">
            <tbody>
                <tr>
                    <td><b>Date:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PrevDay">Prev</button></td>
                    <td><button class="btn btn-primary" @onclick="@ShowToday">Today</button></td>
                    <td><button class="btn btn-primary" @onclick="@NextDay">Next;</button></td>
                </tr>
                <tr>
                    <td><b>Week:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PrevWeek">Prev</button></td>
                    <td></td>
                    <td><button class="btn btn-primary" @onclick="@NextWeek">Next</button></td>
                </tr>
                <tr>
                    <td colspan="4">
                        <p>&nbsp;</p>
                        Click here to set the <b><i>Booking Time Slot:</i></b><br />
                        <input type="text" @onfocus=@TimePickerFocused value=@BookTime_TS />
                        <TimePicker MinuteStep="30" Visible=TimePickerVisible OnSelectedTimeChanged=@LocalTimeChanged ShowClose=true CloseOnSelect=true SelectedTime="BookTime_Local" />
                    </td>
                </tr>
                <tr>
                    <td><b>Slot:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PrevTimeSlot">Prev</button></td>
                    <td><button class="btn btn-primary" @onclick="@StartTimeSlot">Start</button></td>
                    <td><button class="btn btn-primary" @onclick="@NextTimeSlot">Next</button></td>
                </tr>
                <tr><td colspan="4"><h3>Add or Delete Slots</h3></td></tr>
                <tr><td colspan="4"><b>No slots Added: @SlotsAdded</b></td></tr>
                <tr>
                    <td><b>Add:</b></td>
                    <td><button id="min30" class="btn btn-primary" @onclick="@AddCurrentTimeSlot">Time Sot</button></td>
                    <td><button id="min60" class="btn btn-primary" @onclick="@AddCurrentDaySlots">Day</button></td>
                    <td><button id="min90" class="btn btn-primary" @onclick="@AddCurrentWeekSlots">Week</button></td>
                </tr>
                <tr><td colspan="4">--</td></tr>
                <tr>
                    <td><b>Delete:</b></td>
                    <td><button id="min30" class="btn btn-primary2" @onclick="@DeleteCurrentTimeSlot">Time Slot</button></td>
                    <td><button id="min60" class="btn btn-primary2" @onclick="@DeleteCurrentDaySlots">Day</button></td>
                    <td><button id="min90" class="btn btn-primary2" @onclick="@DeleteCurrentWeekSlots">Week</button></td>
                </tr>
            </tbody>
        </table>
    </Authorized>
    <Authorizing>
        <h1>Please wait. Loading ...</h1>
    </Authorizing>
</AuthorizeView>

@code {

    bool bIsAdmin = false;
    bool bHasAccessCard = false;
    bool bIsCoach = false;
    bool bCanSetSlots = false;
    string UserName;
    AuthenticationState context { get; set; }

    List<BookingSlot> AllSlots = new List<BookingSlot>();
    List<BookingSlot> Slots = new List<BookingSlot>();


    string Message = "Info";

    bool DatePickerVisible = false;
    bool TimePickerVisible = false;

    DateTime Today_DT;
    LocalDate Today_Local;


    LocalDate BookingDate_Local;
    string ThisDate;
    DateTime BookingDate_DT;
    TimeSpan BookTime_TS;
    LocalTime BookTime_Local;

    void UpdateDate()
    {
        ThisDate = BookingDate_DT.ToString("D");
        StateHasChanged();
    }

    async Task UpdateData()
    {

        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        UpdateDate();
    }

    protected override async Task OnInitializedAsync()
    {

        context = await authStateProvider.GetAuthenticationStateAsync();
        UserName = context.User.Identity.Name;

        if ((Settings.OpenDays == null) || (Settings.CloseHours == null))
            Settings.SetUpOpenCloseHrs();

        Athlete user = await athleteClient.GetAthlete(UserName);
        if (user.IsAdmin)
        {
            bIsAdmin = true;
            bHasAccessCard = true;
            bCanSetSlots = true;
        }
        else
        {
            bIsAdmin = user.IsAdmin;
            bHasAccessCard = user.HasAccessCard;
            bIsCoach = user.IsCoach;
            bCanSetSlots = user.CanSetSlots;
        }

        if (!bIsAdmin)
            navigationManager.NavigateTo("/");



        Today_DT = DateTime.Today;
        Today_Local = new LocalDate(Today_DT.Year, Today_DT.Month, Today_DT.Day);
        BookingDate_DT = DateTime.Today;
        BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
        BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);

        await UpdateData();
    }

    #region Date and Time UI Handlers
    /// UI Handlers /////////////////////////////////////////////////////////////////////////

    void PrevWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateData();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }
    void NextWeek()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(+7);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void PrevDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(-1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            StateHasChanged();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void ShowToday()
    {
        var bookingDate_DT = DateTime.Today;
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void NextDay()
    {
        var bookingDate_DT = BookingDate_DT.AddDays(1);
        Message = "";
        if (bookingDate_DT >= DateTime.Today)
        {
            BookingDate_DT = bookingDate_DT;
            BookingDate_Local = new LocalDate(BookingDate_DT.Year, BookingDate_DT.Month, BookingDate_DT.Day);
            DatePickerVisible = false;
            StateHasChanged();
            TimePickerVisible = false;
            UpdateDate();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void PrevTimeSlot()
    {
        BookTime_TS = BookTime_TS.Subtract(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void StartTimeSlot()
    {
        BookTime_TS = AthsEssGymBook.Shared.Settings.AddBookingShowStartTime;
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void NextTimeSlot()
    {
        BookTime_TS = BookTime_TS.Add(new TimeSpan(0, 30, 0));
        BookTime_Local = new LocalTime(BookTime_TS.Hours, BookTime_TS.Minutes, BookTime_TS.Seconds);
        StateHasChanged();
        TimePickerVisible = false;
        StateHasChanged();
    }

    void DatePickerFocused(FocusEventArgs e)
    {
        DatePickerVisible = true;
        TimePickerVisible = false;
        StateHasChanged();
    }

    void LocaDateSelected(LocalDate localDate)
    {
        BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
        System.Diagnostics.Debug.WriteLine(BookingDate_DT);
        Message = "";
        if (BookingDate_DT >= DateTime.Today)
        {
            BookingDate_Local = localDate;
            DatePickerVisible = false;
            TimePickerVisible = false;
            StateHasChanged();
        }
        else
        {
            Message = "Please select a date today or in the future.";
        }
    }

    void TimePickerFocused()
    {
        TimePickerVisible = true;
        DatePickerVisible = false;
        StateHasChanged();
    }

    void LocalTimeChanged(LocalTime time)
    {
        BookTime_TS = new TimeSpan(time.Hour, time.Minute, 0);
        BookTime_Local = time;
        StateHasChanged();

    }

    #endregion

    #region Data Add and Delete
    /// DaTA /////////////////////////////////////////////////////////////////////////

    #region Add Slots
    async Task AddaTimeSlot(DateTime date, TimeSpan time)
    {
        SlotsAdded = null;
        BookingSlot slot = new BookingSlot { Date = date, Time = time };
        await _BookingSlotsClient.AddBookingSlot(slot);
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        SlotsAdded = 1;
        System.Diagnostics.Debug.WriteLine("Added {0} slot", SlotsAdded);
    }

    int? SlotsAdded=0;
    async Task AddSlotsForDay(DateTime date)
    {
        int dayOfTheWeek = (int)date.DayOfWeek;
        int slotsAdded = 0;

        TimeSpan? ttime = AthsEssGymBook.Shared.Settings.OpenHours[dayOfTheWeek];
        TimeSpan? eendtime = AthsEssGymBook.Shared.Settings.CloseHours[dayOfTheWeek];
        TimeSpan incr = new TimeSpan(0, 30, 0);

        //Sat is null
        if (ttime == null)
            return;
        if (eendtime == null)
            return;

        TimeSpan time = (TimeSpan)AthsEssGymBook.Shared.Settings.OpenHours[dayOfTheWeek];
        TimeSpan endtime = (TimeSpan)AthsEssGymBook.Shared.Settings.CloseHours[dayOfTheWeek];

        var c = TimeSpan.Compare(time, endtime);

        for (int i = 0; TimeSpan.Compare(time, endtime) < 0; i++)
        {
            bool exists = await _BookingSlotsClient.Exists(date, time);
            if (!exists)
            {
                await AddaTimeSlot(date, time);
                slotsAdded += (int)SlotsAdded;
            }
            time = time.Add(incr);
        }
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        SlotsAdded = slotsAdded;
        System.Diagnostics.Debug.WriteLine("Added {0} slots for day.", SlotsAdded);
    }
    #endregion

    #region Delete Slots
    async Task DeleteaTimeSlot(DateTime bookingDate_DT, TimeSpan bookTime_TS)
    {
        SlotsAdded = null;
        int id = await _BookingSlotsClient.GetBookingSlotId(bookingDate_DT, bookTime_TS);
        if (id > 0)
        {
            await _BookingSlotsClient.DeleteBookingSlot(id);
            SlotsAdded = -1;
        }
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        System.Diagnostics.Debug.WriteLine("Deleted {0} slot", -SlotsAdded);
    }

    async Task DeleteSlotsForDay(DateTime bookingDate_DTS)
    {
        SlotsAdded = null;
        int SlotsDeleted = 0;
        var slots = await _BookingSlotsClient.GetSlotList();
        var slots4Day = from s in slots where s.Date.Date == bookingDate_DTS.Date select s;
        foreach (var s in slots4Day)
        {
            await DeleteaTimeSlot(s.Date, s.Time);
            SlotsDeleted--;
        }
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
        SlotsAdded  = SlotsDeleted;
        System.Diagnostics.Debug.WriteLine("Deleted {0} slots for day.", -SlotsAdded);
    }
    #endregion

    #endregion

    #region UI Slots Handlers

    #region UI Add Slots Handlers
    /// UI Calls to add slots //////////////////////////////////////////////////////

    async Task AddCurrentDaySlots()
    {
        await AddSlotsForDay(BookingDate_DT);
    }

    async Task AddCurrentTimeSlot()
    {
        await AddaTimeSlot(BookingDate_DT, BookTime_TS);
    }

    async Task AddCurrentWeekSlots()
    {
        SlotsAdded = null;
        int slotCount = 0;
        //DateTime today = DateTime.Today;
        int dayofWeek = (int)BookingDate_DT.DayOfWeek;
        DateTime sunday = BookingDate_DT.AddDays(-dayofWeek );
        foreach (int openDay in AthsEssGymBook.Shared.Settings.OpenDays)
        {
            DateTime day = sunday.AddDays(openDay );
            await AddSlotsForDay(day);
            slotCount += (int)SlotsAdded;
        }
        SlotsAdded = slotCount;
        System.Diagnostics.Debug.WriteLine("Added {0} slots for week.", SlotsAdded);
    }
    #endregion

    #region UI Delete Slots Handlers
    /// UI Calls to delete slots //////////////////////////////////////////////////////

    async Task DeleteCurrentDaySlots()
    {
        await DeleteSlotsForDay(BookingDate_DT);
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
    }

    async Task DeleteCurrentTimeSlot()
    {
        await DeleteaTimeSlot(BookingDate_DT, BookTime_TS);
        AllSlots = await _BookingSlotsClient.GetSlotList();
        Slots = AllSlots;
    }

    async Task DeleteCurrentWeekSlots()
    {
        SlotsAdded = null;
        int slotCount = 0;
        int dayofWeek = (int)BookingDate_DT.DayOfWeek;
        DateTime sunday = BookingDate_DT.AddDays(-dayofWeek );
        foreach (int openDay in AthsEssGymBook.Shared.Settings.OpenDays)
        {
            DateTime day = sunday.AddDays(openDay);
            await DeleteSlotsForDay(day);
            slotCount += (int)SlotsAdded;
        }
        SlotsAdded = slotCount;
        System.Diagnostics.Debug.WriteLine("Deleted {0} slots for week.", -SlotsAdded);
    }
    #endregion

    #endregion
}



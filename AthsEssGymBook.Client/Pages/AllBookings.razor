@page "/AllBookings"
@using NodaTime;
@using System;
@using AthsEssGymBook.Shared
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider authStateProvider

@inject Services.BookingsClient BookingsClient

<AuthorizeView>
    <Authorized>
        <h2>Athletics Essendon Gym Bookings</h2>
        <h3><font color="blue">All Gym Bookings</font></h3>
        <h4>Hello @context.User.Identity.Name</h4>

        <p>Click here to choose the <b><i>Booking Date</i></b> to show.</p>
        <table class="table2">
            <tbody>
                <tr>
                    <td colspan="3">
                        <input id="Date" value=@ThisDate type="text" @onfocus="@DateFocused" />
                        <DatePicker Visible="DatePickerVisible" OnSelected="LocaDateSelected" DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Saturday, IsoDayOfWeek.Sunday }) />
                    </td>

                    <td><button class="btn btn-primary" @onclick="@ShowAll">&nbsp;&nbsp;&nbsp;All&nbsp;&nbsp;&nbsp;</button></td>
                </tr>
                <tr>
                    <td><b>Show Date:</b></td>
                    <td><button class="btn btn-primary" @onclick="@ShowToday">&nbsp;&nbspToday&nbsp;&nbsp</button></td>
                    <td><button class="btn btn-primary" @onclick="@Selected">Selected</button></td>
                    <td><button class="btn btn-primary" @onclick="@FromSelected">&nbsp;&nbsp;From&nbsp;&nbsp;</button></td>


                </tr>
                <tr>
                    <td><b>Show Week:</b></td>
                    <td><button class="btn btn-primary" @onclick="@PreviousWeek">&nbsp;&nbsp;Prev&nbsp;&nbsp;</button></td>
                    <td><button class="btn btn-primary" @onclick="@SelectedWeek">Selected</button></td>
                    <td><button class="btn btn-primary" @onclick="@NextWeek">&nbsp;&nbsp;Next&nbsp;&nbsp;&nbsp;</button></td>
                </tr>
            </tbody>
        </table>



        @if (MyBookingz == null)
        {
            <p><em>Please wait. Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Athlete Id</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Duration</th>
                        <th>Slots</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in MyBookingz)
                    {
                        <tr>
                            <td>@booking.Id</td>
                            <td>@booking.AthleteId</td>
                            <td>@booking._Date</td>
                            <td>@booking.Time</td>
                            <td>@booking.Duration</td>
                            <td>@booking.Slots.Count</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </Authorized>
    <Authorizing>
        <h1>Please wait. Loading ...</h1>
    </Authorizing>
</AuthorizeView>


        @functions {

            AuthenticationState context { get; set; }
            List<BookingInfo> MyBookingz { get; set; }
            Athlete LoggegInAthlete { get; set; }
            List<Athlete> Athletes { get; set; }

            Dictionary<TimeSpan, int> BookingCounts { get; set; }
            List<TimeSpan> MyBookingTimes { get; set; } = new List<TimeSpan>();

            LocalDate Today = new LocalDate(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

            int currentCount = Settings.MaxNumberInRoom;
            int showCount = 0;
            string Message = "Info";

            bool DatePickerVisible = false;
            bool TimePickerVisible = false;


            LocalDate BookingDate_Local;  // = System.DateTime.Today;
            string ThisDate = System.DateTime.Today.ToString("D");

            DateTime BookingDate_DT = DateTime.Today;


            async Task RefreshData()
            {
                MyBookingz = await BookingsClient.GetBookingList();
                BookingCounts = await BookingsClient.GetBookingCountForDay(DateTime.Today);

            }
            protected override async Task OnInitializedAsync()
            {
                string ThisDate = System.DateTime.Today.ToString("D");
                BookingDate_DT = DateTime.Today;

                context = await authStateProvider.GetAuthenticationStateAsync();
                string name = context.User.Identity.Name;
                var vathletes = await Http.GetFromJsonAsync<Athlete[]>("api/Athletes");
                Athletes = vathletes.ToList<Athlete>();
                LoggegInAthlete = await Http.GetFromJsonAsync<Athlete>($"api/Athletes/{name}");
                await RefreshData();
            }


            void DateFocused(FocusEventArgs e)
            {
                DatePickerVisible = true;
            }

            async Task LocaDateSelected(LocalDate localDate)
            {
                BookingDate_DT = new DateTime(localDate.Year, localDate.Month, localDate.Day);
                BookingDate_Local = localDate;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookings(BookingDate_DT);
                DatePickerVisible = false;
                StateHasChanged();
            }

            async Task ShowToday()
            {
                BookingDate_DT = DateTime.Today;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookings(BookingDate_DT);
                DatePickerVisible = false;
            }

            async Task Selected()
            {
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookings(BookingDate_DT);
                DatePickerVisible = false;
            }

            async Task ShowAll()
            {
                BookingDate_DT = DateTime.Today;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookingList();
                DatePickerVisible = false;
            }

            async Task FromSelected()
            {

                BookingDate_DT = BookingDate_DT;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookingsFrom(BookingDate_DT);
                DatePickerVisible = false;
            }

            async Task SelectedWeek()
            {

                BookingDate_DT = BookingDate_DT;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookingsSelectedWeek(BookingDate_DT);
                DatePickerVisible = false;
            }

            async Task NextWeek()
            {
                BookingDate_DT = BookingDate_DT.Add(new TimeSpan(7, 0, 0, 0, 0));
                BookingDate_DT= BookingDate_DT;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookingsSelectedWeek(BookingDate_DT);
                DatePickerVisible = false;
            }

            async Task PreviousWeek()
            {
                BookingDate_DT = BookingDate_DT.Subtract(new TimeSpan(7, 0, 0, 0, 0));
                BookingDate_DT = BookingDate_DT;
                ThisDate = BookingDate_DT.ToString("D");
                MyBookingz = await BookingsClient.GetBookingsSelectedWeek(BookingDate_DT);
                DatePickerVisible = false;
            }


        }




